
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNNOTleftLOGICAL_ORleftLOGICAL_ANDleftORleftXORleftANDleftEQUALSNOT_ASSIGNleftLESSERGREATERLESS_EQUALSMORE_EQUALSleftLSHIFTRSHIFTleftPLUSMINUSleftSTARDIVIDEMODAND AND_ASSIGN ASSIGN BOOL_T BREAK CASE COLON COMMA COMPLEX_T CONST CONTINUE DECR DEFAULT DIVIDE DIVIDE_ASSIGN DOT ELSE EQUALS FLOAT FLOAT_T FOR FUNC GOTO GREATER HEX IDENTIFIER IF IMAGINARY IMPORT INCR INTEGER INT_T LCURL LESSER LESS_EQUALS LOGICAL_AND LOGICAL_OR LPAREN LSHIFT LSHIFT_ASSIGN LSQUARE MINUS MINUS_ASSIGN MOD MOD_ASSIGN MORE_EQUALS NOT NOT_ASSIGN OCTAL OR OR_ASSIGN PACKAGE PLUS PLUS_ASSIGN QUICK_ASSIGN RANGE RCURL RETURN RPAREN RSHIFT RSHIFT_ASSIGN RSQUARE RUNE RUNE_T SEMICOLON STAR STAR_ASSIGN STRING STRING_T STRUCT SWITCH TYPE TYPECAST UINT_T VAR XOR XOR_ASSIGNstart : SourceFileType : TypeName\n            | TypeLit\n            | LPAREN Type RPARENTypeName : TypeToken\n                | QualifiedIdentTypeToken : INT_T\n                 | FLOAT_T\n                 | UINT_T\n                 | COMPLEX_T\n                 | RUNE_T\n                 | BOOL_T\n                 | STRING_T\n                 | TYPE IDENTIFIERTypeLit : ArrayType\n               | StructType\n               | PointerTypeTypeOpt : Type\n               | epsilonArrayType : LSQUARE ArrayLength RSQUARE ElementType ArrayLength : Expression  ElementType : Type StructType : STRUCT LCURL FieldDeclRep RCURL FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                  | epsilon  FieldDecl : IdentifierList Type TagOpt TagOpt : Tag\n             | epsilon  Tag : STRING PointerType : STAR BaseTypeBaseType : TypeSignature : Parameters ResultOptResultOpt : Result\n                 | epsilonResult : Parameters\n              | TypeParameters : LPAREN ParameterListOpt RPARENParameterListOpt : ParametersList\n                             | epsilonParametersList : Type\n                      | IdentifierList Type\n                      | ParameterDeclCommaRepParameterDeclCommaRep : ParameterDeclCommaRep COMMA ParameterDecl\n                             | ParameterDecl COMMA ParameterDeclParameterDecl : IdentifierList Type\n                     | TypeBlock : LCURL StatementList RCURLStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonDeclaration : ConstDecl\n                 | TypeDecl\n                 | VarDeclTopLevelDecl : Declaration\n                  | FunctionDeclConstDecl : CONST ConstSpec\n                 | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList TypeExprListOptTypeExprListOpt : TypeOpt ASSIGN ExpressionList\n                       | epsilonIdentifierList : IDENTIFIER IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | epsilonExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonTypeDecl : TYPE TypeSpec\n                | TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : AliasDecl\n                | TypeDefAliasDecl : IDENTIFIER ASSIGN TypeTypeDef : IDENTIFIER TypeVarDecl : VAR VarSpec\n               | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOpt\n               | IdentifierList ASSIGN ExpressionListExpressionListOpt : ASSIGN ExpressionList\n                         | epsilon ShortVarDecl : IDENTIFIER QUICK_ASSIGN Expression FunctionDecl : FUNC FunctionName Function\n                    | FUNC FunctionName SignatureFunctionName : IDENTIFIERFunction : Signature FunctionBodyFunctionBody : BlockOperand : Literal\n               | OperandName\n               | LPAREN Expression RPARENLiteral : BasicLitBasicLit : INTEGER\n                | OCTAL\n                | HEX\n                | FLOAT\n                | IMAGINARY\n                | RUNE\n                | STRINGOperandName : IDENTIFIERQualifiedIdent : IDENTIFIER DOT TypeNameCompositeLit : LiteralType LiteralValueLiteralType : ArrayType\n                   | ElementType\n                   | TypeNameLiteralValue : LCURL ElementListOpt RCURLElementListOpt : ElementList\n                           | epsilonElementList : KeyedElement KeyedElementCommaRepKeyedElementCommaRep : KeyedElementCommaRep COMMA KeyedElement\n                            | epsilonKeyedElement : Key COLON Element\n                    | ElementKey : FieldName\n           | Expression\n           | LiteralValueFieldName : IDENTIFIERElement : Expression\n               | LiteralValuePrimaryExpr : Operand\n                   | PrimaryExpr Selector\n                   | Conversion\n                   | PrimaryExpr Index\n                   | PrimaryExpr Slice\n                   | PrimaryExpr TypeAssertion\n                   | PrimaryExpr ArgumentsSelector : DOT IDENTIFIERIndex : LSQUARE Expression RSQUARESlice : LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE\n             | LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARETypeAssertion : DOT LPAREN Type RPARENArguments : LPAREN ExpressionListTypeOpt RPARENExpressionListTypeOpt : ExpressionList\n                             | epsilonExpressionListCommaOpt : COMMA ExpressionList\n                              | epsilonExpression : UnaryExpr\n                  | Expression BinaryOp ExpressionExpressionOpt : Expression\n                     | epsilonUnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExpr\n                 | NOT UnaryExprBinaryOp : LOGICAL_OR\n                | LOGICAL_AND\n                | RelOp\n                | AddMulOpRelOp : EQUALS\n             | NOT_ASSIGN\n             | LESSER\n             | GREATER\n             | LESS_EQUALS\n             | MORE_EQUALSAddMulOp : UnaryOp\n                | OR\n                | XOR\n                | DIVIDE\n                | MOD\n                | LSHIFT\n                | RSHIFTUnaryOp : PLUS\n               | MINUS\n               | STAR\n               | AND Conversion : TYPECAST Type LPAREN Expression RPARENStatement : Declaration\n                 | LabeledStmt\n                 | SimpleStmt\n                 | ReturnStmt\n                 | BreakStmt\n                 | ContinueStmt\n                 | GotoStmt\n                 | Block\n                 | IfStmt\n                 | SwitchStmt\n                 | ForStmt  SimpleStmt : epsilon\n                 | ExpressionStmt\n                 | IncDecStmt\n                 | Assignment\n                 | ShortVarDecl  LabeledStmt : Label COLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  IncDecStmt : Expression INCR\n                 | Expression DECR  Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : PLUS_ASSIGN\n               | MINUS_ASSIGN\n               | STAR_ASSIGN\n               | DIVIDE_ASSIGN\n               | MOD_ASSIGN\n               | AND_ASSIGN\n               | OR_ASSIGN\n               | XOR_ASSIGN\n               | LSHIFT_ASSIGN\n               | RSHIFT_ASSIGN\n               | ASSIGN  IfStmt : IF Expression Block ElseOpt  SimpleStmtOpt : SimpleStmt SEMICOLON\n                    | epsilon  ElseOpt : ELSE IfStmt\n              | ELSE Block\n              | epsilon  SwitchStmt : ExprSwitchStmt\n                 | TypeSwitchStmt  ExprSwitchStmt : SWITCH ExpressionOpt LCURL ExprCaseClauseRep RCURL ExprCaseClauseRep : ExprCaseClauseRep ExprCaseClause\n                        | epsilon ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n                     | DEFAULT  TypeSwitchStmt : SWITCH SimpleStmtOpt TypeSwitchGuard LCURL TypeCaseClauseOpt RCURL TypeSwitchGuard : IdentifierOpt PrimaryExpr DOT LPAREN TYPE RPAREN  IdentifierOpt : IDENTIFIER QUICK_ASSIGN\n                    | epsilon  TypeCaseClauseOpt : TypeCaseClauseOpt TypeCaseClause\n                        | epsilon  TypeCaseClause : TypeSwitchCase COLON StatementList TypeSwitchCase : CASE TypeList\n                     | DEFAULT  TypeList : Type TypeRep TypeRep : TypeRep COMMA Type\n              | epsilon ForStmt : FOR ConditionBlockOpt BlockConditionBlockOpt : epsilon\n             | Condition\n             | ForClause\n             | RangeClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n          | Condition RangeClause : ExpressionIdentListOpt RANGE ExpressionExpressionIdentListOpt : epsilon\n             | ExpressionIdentifierExpressionIdentifier : ExpressionList ASSIGNReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n             | epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n        | epsilon GotoStmt : GOTO Label SourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n           | ImportDeclRep ImportDecl SEMICOLONTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                     | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDecl : IMPORT ImportSpec\n          | IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n            | epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : DOT\n                        | PackageName\n                        | epsilon ImportPath : STRING epsilon : '
    
_lr_action_items = {'FUNC':([5,8,9,10,11,24,35,],[-265,-250,-265,20,-253,-251,-252,]),'DIVIDE':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,177,-98,177,177,-144,-125,-126,-123,-127,-128,-145,-93,177,-129,177,-102,177,-134,-130,177,-102,177,177,177,177,177,-133,-167,177,-131,177,177,177,-132,]),'RSHIFT_ASSIGN':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,157,158,159,161,162,163,186,203,204,206,213,217,240,243,244,258,260,274,279,281,290,310,313,314,333,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-144,-125,-126,-123,-127,-128,-145,-66,-68,-93,-129,-140,-102,293,-265,-134,-130,-102,293,-265,-265,-67,-133,-167,-131,-132,]),'CONST':([5,8,9,10,11,24,35,135,194,195,265,271,363,373,],[-265,-250,-265,14,-253,-251,-252,-265,14,-50,-49,14,-265,-265,]),'LPAREN':([13,14,21,23,33,34,36,37,40,45,52,53,54,56,57,58,59,60,61,63,64,66,67,69,72,74,75,76,77,79,81,85,89,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,115,117,118,119,120,123,125,131,135,137,141,148,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,192,194,195,197,199,200,206,213,214,215,216,218,220,221,229,234,238,240,250,253,257,258,259,260,265,271,274,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,313,314,320,322,323,324,326,328,333,334,343,344,349,350,357,360,363,364,369,373,379,],[25,32,39,43,67,-265,-88,81,67,67,67,98,-15,-9,-5,-3,-8,-2,-10,-12,-16,-7,67,-13,-17,-6,-11,-65,-63,131,67,98,67,-31,-30,-124,-165,98,98,160,-91,-122,-100,-164,-92,-94,-163,-95,-99,-102,-101,-97,-96,-166,67,-98,98,98,-14,67,-265,67,-265,98,-125,-126,98,-123,-127,-128,98,214,67,-156,-147,-161,-162,-149,-155,-154,98,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,218,-103,-4,-64,98,-50,-37,67,67,-93,-129,67,-22,-20,98,-23,67,98,98,98,-102,98,67,98,-134,98,-130,-49,98,-102,-204,-265,98,-190,-200,-193,-192,-198,-197,-195,-199,-196,98,-191,-194,-201,-133,-167,98,98,-201,-203,-219,98,-131,98,160,-218,98,98,369,-132,-265,67,67,-265,67,]),'STAR_ASSIGN':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,157,158,159,161,162,163,186,203,204,206,213,217,240,243,244,258,260,274,279,281,290,310,313,314,333,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-144,-125,-126,-123,-127,-128,-145,-66,-68,-93,-129,-140,-102,294,-265,-134,-130,-102,294,-265,-265,-67,-133,-167,-131,-132,]),'MINUS_ASSIGN':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,157,158,159,161,162,163,186,203,204,206,213,217,240,243,244,258,260,274,279,281,290,310,313,314,333,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-144,-125,-126,-123,-127,-128,-145,-66,-68,-93,-129,-140,-102,295,-265,-134,-130,-102,295,-265,-265,-67,-133,-167,-131,-132,]),'OR_ASSIGN':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,157,158,159,161,162,163,186,203,204,206,213,217,240,243,244,258,260,274,279,281,290,310,313,314,333,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-144,-125,-126,-123,-127,-128,-145,-66,-68,-93,-129,-140,-102,297,-265,-134,-130,-102,297,-265,-265,-67,-133,-167,-131,-132,]),'GOTO':([135,194,195,265,271,363,373,],[-265,226,-50,-49,226,-265,-265,]),'MOD':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,184,-98,184,184,-144,-125,-126,-123,-127,-128,-145,-93,184,-129,184,-102,184,-134,-130,184,-102,184,184,184,184,184,-133,-167,184,-131,184,184,184,-132,]),'LCURL':([54,56,57,58,59,60,61,63,64,66,69,70,72,74,75,79,80,94,95,96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,125,127,128,129,130,132,135,150,157,158,159,161,162,163,186,187,188,194,195,197,203,204,206,213,215,216,217,220,223,225,232,234,238,241,244,249,258,260,265,271,273,274,275,276,277,280,281,287,288,290,305,306,308,310,313,314,327,330,331,333,339,346,349,360,361,363,373,378,],[-15,-9,-5,-3,-8,-2,-10,-12,-16,-7,-13,124,-17,-6,-11,-265,135,-31,-30,-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-14,-35,-36,-32,-34,-33,-265,-265,-144,-125,-126,-123,-127,-128,-145,-103,-4,135,-50,-37,-66,-68,-93,-129,-22,-20,-140,-23,-180,-182,-181,-265,-265,-179,-186,-183,-134,-130,-49,135,-232,-102,-230,-229,135,-231,-233,325,-142,-141,-188,-187,135,-67,-133,-167,342,-85,-189,-131,-237,135,-265,-132,-234,-265,-265,-217,]),'OCTAL':([53,85,97,98,99,104,107,117,120,123,135,148,160,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,194,195,218,229,234,238,250,257,259,265,271,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,320,322,323,324,326,328,334,344,349,350,363,373,],[115,115,-165,115,115,-164,-163,-166,115,115,-265,115,115,115,-156,-147,-161,-162,-149,-155,-154,115,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,115,-50,115,115,115,115,115,115,115,-49,115,-204,-265,115,-190,-200,-193,-192,-198,-197,-195,-199,-196,115,-191,-194,-201,115,115,-201,-203,-219,115,115,-218,115,115,-265,-265,]),'COLON':([54,56,57,58,59,60,61,63,64,66,69,72,74,75,94,95,96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,125,150,157,158,159,161,162,163,164,186,187,188,203,204,206,210,211,212,213,215,216,217,220,230,240,258,260,310,312,313,314,333,351,352,360,362,365,368,371,372,375,376,380,],[-15,-9,-5,-3,-8,-2,-10,-12,-16,-7,-13,-17,-6,-11,-31,-30,-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-14,-265,-144,-125,-126,-123,-127,-128,-265,-145,-103,-4,-66,-68,-93,259,-142,-141,-129,-22,-20,-140,-23,271,-185,-134,-130,-67,334,-133,-167,-131,363,-215,-132,-214,373,-224,-265,-223,-225,-227,-226,]),'LOGICAL_AND':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,168,-98,168,168,-144,-125,-126,-123,-127,-128,-145,-93,168,-129,168,-102,168,-134,-130,168,-102,168,168,168,168,168,-133,-167,168,-131,168,168,168,-132,]),'LSHIFT':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,169,-98,169,169,-144,-125,-126,-123,-127,-128,-145,-93,169,-129,169,-102,169,-134,-130,169,-102,169,169,169,169,169,-133,-167,169,-131,169,169,169,-132,]),'GREATER':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,179,-98,179,179,-144,-125,-126,-123,-127,-128,-145,-93,179,-129,179,-102,179,-134,-130,179,-102,179,179,179,179,179,-133,-167,179,-131,179,179,179,-132,]),'STAR':([33,34,40,45,52,53,67,76,77,79,81,85,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,123,131,135,137,141,148,150,156,157,158,159,160,161,162,163,164,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,192,194,195,197,199,200,206,212,213,214,217,218,221,229,234,238,240,244,250,253,257,258,259,260,262,265,271,274,281,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,308,310,312,313,314,320,322,323,330,333,334,338,339,348,349,350,360,363,364,369,373,379,],[52,-265,52,52,52,97,52,-65,-63,52,52,97,52,-124,-165,97,97,-143,-91,-122,-100,-164,-92,-94,-163,-95,-99,-102,-101,-97,-139,-96,97,-166,52,-98,97,97,52,-265,52,-265,97,97,97,-144,-125,-126,97,-123,-127,-128,97,52,-156,-147,-161,-162,-149,-155,-154,97,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,-145,-64,97,-50,-37,52,52,-93,97,-129,52,97,97,52,97,97,97,-102,97,97,52,97,-134,97,-130,97,-49,97,-102,97,97,97,-190,-200,-193,-192,-198,-197,-195,-199,-196,97,-191,-194,-201,97,97,97,-133,-167,97,97,-201,97,-131,97,97,97,97,97,97,-132,-265,52,52,-265,52,]),'RUNE':([53,85,97,98,99,104,107,117,120,123,135,148,160,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,194,195,218,229,234,238,250,257,259,265,271,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,320,322,323,324,326,328,334,344,349,350,363,373,],[103,103,-165,103,103,-164,-163,-166,103,103,-265,103,103,103,-156,-147,-161,-162,-149,-155,-154,103,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,103,-50,103,103,103,103,103,103,103,-49,103,-204,-265,103,-190,-200,-193,-192,-198,-197,-195,-199,-196,103,-191,-194,-201,103,103,-201,-203,-219,103,103,-218,103,103,-265,-265,]),'MINUS':([53,85,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,119,120,123,135,148,150,156,157,158,159,160,161,162,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,194,195,206,212,213,217,218,229,234,238,240,244,250,257,258,259,260,262,265,271,274,281,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,308,310,312,313,314,320,322,323,330,333,334,338,339,348,349,350,360,363,373,],[104,104,-124,-165,104,104,-143,-91,-122,-100,-164,-92,-94,-163,-95,-99,-102,-101,-97,-139,-96,104,-166,-98,104,104,-265,104,104,104,-144,-125,-126,104,-123,-127,-128,104,-156,-147,-161,-162,-149,-155,-154,104,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,-145,104,-50,-93,104,-129,104,104,104,104,104,-102,104,104,104,-134,104,-130,104,-49,104,-102,104,104,104,-190,-200,-193,-192,-198,-197,-195,-199,-196,104,-191,-194,-201,104,104,104,-133,-167,104,104,-201,104,-131,104,104,104,104,104,104,-132,-265,-265,]),'DOT':([13,25,46,47,62,96,100,101,102,103,105,106,108,109,110,111,112,115,119,141,154,158,159,161,162,163,206,213,240,258,260,274,313,314,333,343,360,],[30,-265,-259,30,121,-124,165,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-96,-98,121,-258,-125,-126,-123,-127,-128,-93,-129,-102,-134,-130,-102,-133,-167,-131,357,-132,]),'UINT_T':([33,34,40,45,52,67,76,77,79,81,89,118,121,131,137,141,166,192,197,199,200,214,221,253,364,369,379,],[56,-265,56,56,56,56,-65,-63,56,56,56,56,56,56,56,-265,56,-64,-37,56,56,56,56,56,56,56,56,]),'RSQUARE':([96,100,101,102,103,105,106,108,109,110,111,112,113,114,115,116,119,157,158,159,161,162,163,186,206,211,212,213,217,258,259,260,311,312,313,314,333,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,166,-96,-21,-98,-144,-125,-126,-123,-127,-128,-145,-93,-142,260,-129,-140,-134,-265,-130,333,-141,-133,-167,-131,360,-132,]),'BREAK':([135,194,195,265,271,363,373,],[-265,245,-50,-49,245,-265,-265,]),'INCR':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,157,158,159,161,162,163,186,206,213,217,240,244,258,260,274,281,290,313,314,333,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-144,-125,-126,-123,-127,-128,-145,-93,-129,-140,-102,306,-134,-130,-102,306,306,-133,-167,-131,-132,]),'RPAREN':([25,32,39,43,46,47,50,51,54,56,57,58,59,60,61,63,64,66,69,72,74,75,81,82,83,86,87,94,95,96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,122,125,131,136,138,139,140,143,150,154,155,156,157,158,159,160,161,162,163,186,187,188,193,198,201,203,204,205,206,207,208,209,213,215,216,217,220,254,255,256,258,260,261,262,309,310,313,314,333,360,374,],[-265,-265,-265,-265,-259,90,93,-59,-15,-9,-5,-3,-8,-2,-10,-12,-16,-7,-13,-17,-6,-11,-265,144,-80,151,-72,-31,-30,-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,188,-14,-265,197,-42,-40,-38,-39,-265,-258,-58,206,-144,-125,-126,-265,-123,-127,-128,-145,-103,-4,188,-41,-79,-66,-68,-71,-93,-136,-135,258,-129,-22,-20,-140,-23,-46,-43,-44,-134,-130,313,314,-45,-67,-133,-167,-131,-132,378,]),'SEMICOLON':([1,6,7,12,15,16,17,18,19,22,26,31,33,34,38,41,42,44,48,49,54,56,57,58,59,60,61,63,64,65,66,69,71,72,74,75,76,77,78,79,80,84,88,90,91,92,93,94,95,96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,125,127,128,129,130,132,133,134,135,144,145,146,147,149,150,151,152,153,157,158,159,161,162,163,186,187,188,189,192,194,195,197,202,203,204,206,213,215,216,217,219,220,222,223,224,225,227,228,229,231,232,233,234,235,236,237,238,239,240,241,242,244,245,246,247,248,249,251,252,258,260,264,265,266,267,268,269,270,271,272,274,276,281,283,284,285,286,288,290,305,306,307,310,313,314,315,316,317,318,319,320,321,330,331,332,333,335,336,337,338,345,347,353,358,359,360,363,366,373,],[5,-254,-255,24,-55,35,-54,-51,-52,-53,-256,-56,-265,-265,-77,-74,-73,-69,-260,-264,-15,-9,-5,-3,-8,-2,-10,-12,-16,-62,-7,-13,-60,-17,-6,-11,-65,-63,-86,-265,-87,-265,-76,-257,154,155,-57,-31,-30,-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-14,-35,-36,-32,-34,-33,-89,-90,-265,-78,201,-84,-81,-82,-265,-70,205,-75,-144,-125,-126,-123,-127,-128,-145,-103,-4,-61,-64,-265,-50,-37,-83,-66,-68,-93,-129,-22,-20,-140,263,-23,-173,-180,265,-182,-169,-209,-265,-208,-181,-174,-265,-175,-177,-265,-265,-168,-102,-179,-176,-186,-265,-171,-170,-178,-183,-172,-47,-134,-130,-265,-49,-185,-248,-241,-243,-242,-265,320,-102,-179,-186,-247,-245,-246,324,-179,-186,-188,-187,-244,-67,-133,-167,-29,-28,-27,-26,-184,-265,-228,-85,-189,-265,-131,-236,-235,349,-233,-207,-202,-210,-205,-206,-132,-265,-216,-265,]),'LOGICAL_OR':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,182,-98,182,182,-144,-125,-126,-123,-127,-128,-145,-93,182,-129,182,-102,182,-134,-130,182,-102,182,182,182,182,182,-133,-167,182,-131,182,182,182,-132,]),'RETURN':([135,194,195,265,271,363,373,],[-265,229,-50,-49,229,-265,-265,]),'FLOAT_T':([33,34,40,45,52,67,76,77,79,81,89,118,121,131,137,141,166,192,197,199,200,214,221,253,364,369,379,],[59,-265,59,59,59,59,-65,-63,59,59,59,59,59,59,59,-265,59,-64,-37,59,59,59,59,59,59,59,59,]),'RCURL':([124,135,190,191,194,195,196,263,265,325,340,341,342,354,355,356,363,367,370,373,377,],[-265,-265,220,-25,-48,-50,252,-24,-49,-265,353,-212,-265,-211,366,-221,-265,-220,-213,-265,-222,]),'LESS_EQUALS':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,173,-98,173,173,-144,-125,-126,-123,-127,-128,-145,-93,173,-129,173,-102,173,-134,-130,173,-102,173,173,173,173,173,-133,-167,173,-131,173,173,173,-132,]),'PLUS':([53,85,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,119,120,123,135,148,150,156,157,158,159,160,161,162,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,194,195,206,212,213,217,218,229,234,238,240,244,250,257,258,259,260,262,265,271,274,281,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,308,310,312,313,314,320,322,323,330,333,334,338,339,348,349,350,360,363,373,],[107,107,-124,-165,107,107,-143,-91,-122,-100,-164,-92,-94,-163,-95,-99,-102,-101,-97,-139,-96,107,-166,-98,107,107,-265,107,107,107,-144,-125,-126,107,-123,-127,-128,107,-156,-147,-161,-162,-149,-155,-154,107,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,-145,107,-50,-93,107,-129,107,107,107,107,107,-102,107,107,107,-134,107,-130,107,-49,107,-102,107,107,107,-190,-200,-193,-192,-198,-197,-195,-199,-196,107,-191,-194,-201,107,107,107,-133,-167,107,107,-201,107,-131,107,107,107,107,107,107,-132,-265,-265,]),'DEFAULT':([194,195,265,325,340,341,342,354,355,356,363,367,370,373,377,],[-48,-50,-49,-265,352,-212,-265,-211,368,-221,-265,-220,-213,-265,-222,]),'SWITCH':([135,194,195,265,271,363,373,],[-265,238,-50,-49,238,-265,-265,]),'AND_ASSIGN':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,157,158,159,161,162,163,186,203,204,206,213,217,240,243,244,258,260,274,279,281,290,310,313,314,333,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-144,-125,-126,-123,-127,-128,-145,-66,-68,-93,-129,-140,-102,300,-265,-134,-130,-102,300,-265,-265,-67,-133,-167,-131,-132,]),'COMPLEX_T':([33,34,40,45,52,67,76,77,79,81,89,118,121,131,137,141,166,192,197,199,200,214,221,253,364,369,379,],[61,-265,61,61,61,61,-65,-63,61,61,61,61,61,61,61,-265,61,-64,-37,61,61,61,61,61,61,61,61,]),'DECR':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,157,158,159,161,162,163,186,206,213,217,240,244,258,260,274,281,290,313,314,333,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-144,-125,-126,-123,-127,-128,-145,-93,-129,-140,-102,305,-134,-130,-102,305,305,-133,-167,-131,-132,]),'IMPORT':([5,8,9,24,],[-265,-250,13,-251,]),'IMAGINARY':([53,85,97,98,99,104,107,117,120,123,135,148,160,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,194,195,218,229,234,238,250,257,259,265,271,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,320,322,323,324,326,328,334,344,349,350,363,373,],[109,109,-165,109,109,-164,-163,-166,109,109,-265,109,109,109,-156,-147,-161,-162,-149,-155,-154,109,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,109,-50,109,109,109,109,109,109,109,-49,109,-204,-265,109,-190,-200,-193,-192,-198,-197,-195,-199,-196,109,-191,-194,-201,109,109,-201,-203,-219,109,109,-218,109,109,-265,-265,]),'IDENTIFIER':([2,13,14,20,21,23,25,32,33,34,39,40,43,45,46,47,50,51,52,53,67,73,76,77,79,81,82,83,85,86,87,89,97,98,99,104,107,117,118,120,121,123,124,126,131,135,137,141,148,154,155,160,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,190,191,192,194,195,197,199,200,201,205,214,218,221,226,229,234,237,238,245,250,253,257,259,263,265,271,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,320,322,323,324,326,328,334,344,349,350,357,363,364,369,373,374,379,],[7,7,34,36,34,45,-265,-265,62,-265,-265,62,-265,62,-259,7,34,-59,62,110,62,125,-65,-63,62,141,34,-80,110,45,-72,62,-165,110,110,-164,-163,-166,62,110,62,110,-265,192,141,-265,62,-265,110,-258,-58,110,110,213,62,-156,-147,-161,-162,-149,-155,-154,110,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,34,-25,-64,240,-50,-37,141,141,-79,-71,62,110,62,266,110,274,266,274,266,110,62,110,110,-24,-49,240,-204,329,110,-190,-200,-193,-192,-198,-197,-195,-199,-196,110,-191,-194,-201,110,110,-201,-203,-219,110,110,-218,274,110,213,-265,62,62,-265,125,62,]),'ASSIGN':([33,34,40,45,54,55,56,57,58,59,60,61,63,64,65,66,68,69,72,74,75,76,77,84,94,95,96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,125,157,158,159,161,162,163,186,187,188,192,203,204,206,213,215,216,217,220,240,243,244,258,260,274,279,281,290,310,313,314,333,360,],[-265,-265,85,89,-15,-18,-9,-5,-3,-8,-2,-10,-12,-16,-19,-7,123,-13,-17,-6,-11,-65,-63,148,-31,-30,-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-14,-144,-125,-126,-123,-127,-128,-145,-103,-4,-64,-66,-68,-93,-129,-22,-20,-140,-23,-102,304,-265,-134,-130,-102,323,-265,-265,-67,-133,-167,-131,-132,]),'BOOL_T':([33,34,40,45,52,67,76,77,79,81,89,118,121,131,137,141,166,192,197,199,200,214,221,253,364,369,379,],[63,-265,63,63,63,63,-65,-63,63,63,63,63,63,63,63,-265,63,-64,-37,63,63,63,63,63,63,63,63,]),'CASE':([194,195,265,325,340,341,342,354,355,356,363,367,370,373,377,],[-48,-50,-49,-265,350,-212,-265,-211,364,-221,-265,-220,-213,-265,-222,]),'XOR':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,176,-98,176,176,-144,-125,-126,-123,-127,-128,-145,-93,176,-129,176,-102,176,-134,-130,176,-102,176,176,176,176,176,-133,-167,176,-131,176,176,176,-132,]),'STRING':([7,13,25,27,28,29,30,46,47,53,54,56,57,58,59,60,61,63,64,66,69,72,74,75,85,94,95,97,98,99,104,107,117,120,123,125,135,148,154,160,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,187,188,194,195,215,216,218,220,229,234,238,250,257,259,264,265,271,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,320,322,323,324,326,328,334,344,349,350,363,373,],[-255,-265,-265,-263,-262,49,-261,-259,-265,111,-15,-9,-5,-3,-8,-2,-10,-12,-16,-7,-13,-17,-6,-11,111,-31,-30,-165,111,111,-164,-163,-166,111,111,-14,-265,111,-258,111,111,-156,-147,-161,-162,-149,-155,-154,111,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,-103,-4,111,-50,-22,-20,111,-23,111,111,111,111,111,111,315,-49,111,-204,-265,111,-190,-200,-193,-192,-198,-197,-195,-199,-196,111,-191,-194,-201,111,111,-201,-203,-219,111,111,-218,111,111,-265,-265,]),'FOR':([135,194,195,265,271,363,373,],[-265,234,-50,-49,234,-265,-265,]),'PACKAGE':([0,],[2,]),'INT_T':([33,34,40,45,52,67,76,77,79,81,89,118,121,131,137,141,166,192,197,199,200,214,221,253,364,369,379,],[66,-265,66,66,66,66,-65,-63,66,66,66,66,66,66,66,-265,66,-64,-37,66,66,66,66,66,66,66,66,]),'HEX':([53,85,97,98,99,104,107,117,120,123,135,148,160,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,194,195,218,229,234,238,250,257,259,265,271,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,320,322,323,324,326,328,334,344,349,350,363,373,],[112,112,-165,112,112,-164,-163,-166,112,112,-265,112,112,112,-156,-147,-161,-162,-149,-155,-154,112,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,112,-50,112,112,112,112,112,112,112,-49,112,-204,-265,112,-190,-200,-193,-192,-198,-197,-195,-199,-196,112,-191,-194,-201,112,112,-201,-203,-219,112,112,-218,112,112,-265,-265,]),'EQUALS':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,178,-98,178,178,-144,-125,-126,-123,-127,-128,-145,-93,178,-129,178,-102,178,-134,-130,178,-102,178,178,178,178,178,-133,-167,178,-131,178,178,178,-132,]),'ELSE':([252,332,],[-47,346,]),'COMMA':([34,54,56,57,58,59,60,61,63,64,66,69,72,74,75,76,77,94,95,96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,125,138,139,141,142,150,157,158,159,161,162,163,186,187,188,192,193,198,203,204,206,213,215,216,217,220,240,244,254,255,256,258,260,274,281,290,309,310,313,314,333,360,371,375,376,380,],[-265,-15,-9,-5,-3,-8,-2,-10,-12,-16,-7,-13,-17,-6,-11,-65,126,-31,-30,-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-14,199,-46,-265,200,-265,-144,-125,-126,-123,-127,-128,-145,-103,-4,-64,-46,-45,257,-68,-93,-129,-22,-20,-140,-23,-102,-265,-46,-43,-44,-134,-130,-102,-265,-265,-45,-67,-133,-167,-131,-132,-265,379,-227,-226,]),'QUICK_ASSIGN':([240,274,329,],[291,291,344,]),'RANGE':([234,276,278,282,323,],[-265,-238,322,-239,-240,]),'DIVIDE_ASSIGN':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,157,158,159,161,162,163,186,203,204,206,213,217,240,243,244,258,260,274,279,281,290,310,313,314,333,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-144,-125,-126,-123,-127,-128,-145,-66,-68,-93,-129,-140,-102,303,-265,-134,-130,-102,303,-265,-265,-67,-133,-167,-131,-132,]),'LSQUARE':([33,34,40,45,52,67,76,77,79,81,89,96,100,101,102,103,105,106,108,109,110,111,112,115,118,119,131,137,141,158,159,161,162,163,166,192,197,199,200,206,213,214,221,240,253,258,260,274,313,314,333,343,360,364,369,379,],[53,-265,53,53,53,53,-65,-63,53,53,53,-124,164,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-96,53,-98,53,53,-265,-125,-126,-123,-127,-128,53,-64,-37,53,53,-93,-129,53,53,-102,53,-134,-130,-102,-133,-167,-131,164,-132,53,53,53,]),'INTEGER':([53,85,97,98,99,104,107,117,120,123,135,148,160,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,194,195,218,229,234,238,250,257,259,265,271,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,320,322,323,324,326,328,334,344,349,350,363,373,],[108,108,-165,108,108,-164,-163,-166,108,108,-265,108,108,108,-156,-147,-161,-162,-149,-155,-154,108,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,108,-50,108,108,108,108,108,108,108,-49,108,-204,-265,108,-190,-200,-193,-192,-198,-197,-195,-199,-196,108,-191,-194,-201,108,108,-201,-203,-219,108,108,-218,108,108,-265,-265,]),'VAR':([5,8,9,10,11,24,35,135,194,195,265,271,363,373,],[-265,-250,-265,21,-253,-251,-252,-265,21,-50,-49,21,-265,-265,]),'STRING_T':([33,34,40,45,52,67,76,77,79,81,89,118,121,131,137,141,166,192,197,199,200,214,221,253,364,369,379,],[69,-265,69,69,69,69,-65,-63,69,69,69,69,69,69,69,-265,69,-64,-37,69,69,69,69,69,69,69,69,]),'TYPECAST':([53,85,97,98,99,104,107,117,120,123,135,148,160,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,194,195,218,229,234,238,250,257,259,265,271,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,320,322,323,324,326,328,334,344,349,350,363,373,],[118,118,-165,118,118,-164,-163,-166,118,118,-265,118,118,118,-156,-147,-161,-162,-149,-155,-154,118,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,118,-50,118,118,118,118,118,118,118,-49,118,-204,-265,118,-190,-200,-193,-192,-198,-197,-195,-199,-196,118,-191,-194,-201,118,118,-201,-203,-219,118,118,-218,118,118,-265,-265,]),'AND':([53,85,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,119,120,123,135,148,150,156,157,158,159,160,161,162,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,194,195,206,212,213,217,218,229,234,238,240,244,250,257,258,259,260,262,265,271,274,281,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,308,310,312,313,314,320,322,323,330,333,334,338,339,348,349,350,360,363,373,],[117,117,-124,-165,117,117,-143,-91,-122,-100,-164,-92,-94,-163,-95,-99,-102,-101,-97,-139,-96,117,-166,-98,117,117,-265,117,117,117,-144,-125,-126,117,-123,-127,-128,117,-156,-147,-161,-162,-149,-155,-154,117,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,-145,117,-50,-93,117,-129,117,117,117,117,117,-102,117,117,117,-134,117,-130,117,-49,117,-102,117,117,117,-190,-200,-193,-192,-198,-197,-195,-199,-196,117,-191,-194,-201,117,117,117,-133,-167,117,117,-201,117,-131,117,117,117,117,117,117,-132,-265,-265,]),'MOD_ASSIGN':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,157,158,159,161,162,163,186,203,204,206,213,217,240,243,244,258,260,274,279,281,290,310,313,314,333,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-144,-125,-126,-123,-127,-128,-145,-66,-68,-93,-129,-140,-102,298,-265,-134,-130,-102,298,-265,-265,-67,-133,-167,-131,-132,]),'NOT_ASSIGN':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,175,-98,175,175,-144,-125,-126,-123,-127,-128,-145,-93,175,-129,175,-102,175,-134,-130,175,-102,175,175,175,175,175,-133,-167,175,-131,175,175,175,-132,]),'STRUCT':([33,34,40,45,52,67,76,77,79,81,89,118,131,137,141,166,192,197,199,200,214,221,253,364,369,379,],[70,-265,70,70,70,70,-65,-63,70,70,70,70,70,70,-265,70,-64,-37,70,70,70,70,70,70,70,70,]),'RSHIFT':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,170,-98,170,170,-144,-125,-126,-123,-127,-128,-145,-93,170,-129,170,-102,170,-134,-130,170,-102,170,170,170,170,170,-133,-167,170,-131,170,170,170,-132,]),'LSHIFT_ASSIGN':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,157,158,159,161,162,163,186,203,204,206,213,217,240,243,244,258,260,274,279,281,290,310,313,314,333,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-144,-125,-126,-123,-127,-128,-145,-66,-68,-93,-129,-140,-102,299,-265,-134,-130,-102,299,-265,-265,-67,-133,-167,-131,-132,]),'IF':([135,194,195,265,271,346,363,373,],[-265,250,-50,-49,250,250,-265,-265,]),'FLOAT':([53,85,97,98,99,104,107,117,120,123,135,148,160,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,194,195,218,229,234,238,250,257,259,265,271,288,289,291,292,293,294,295,296,297,298,299,300,301,302,303,304,320,322,323,324,326,328,334,344,349,350,363,373,],[119,119,-165,119,119,-164,-163,-166,119,119,-265,119,119,119,-156,-147,-161,-162,-149,-155,-154,119,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,119,-50,119,119,119,119,119,119,119,-49,119,-204,-265,119,-190,-200,-193,-192,-198,-197,-195,-199,-196,119,-191,-194,-201,119,119,-201,-203,-219,119,119,-218,119,119,-265,-265,]),'MORE_EQUALS':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,172,-98,172,172,-144,-125,-126,-123,-127,-128,-145,-93,172,-129,172,-102,172,-134,-130,172,-102,172,172,172,172,172,-133,-167,172,-131,172,172,172,-132,]),'LESSER':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,181,-98,181,181,-144,-125,-126,-123,-127,-128,-145,-93,181,-129,181,-102,181,-134,-130,181,-102,181,181,181,181,181,-133,-167,181,-131,181,181,181,-132,]),'XOR_ASSIGN':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,157,158,159,161,162,163,186,203,204,206,213,217,240,243,244,258,260,274,279,281,290,310,313,314,333,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-144,-125,-126,-123,-127,-128,-145,-66,-68,-93,-129,-140,-102,296,-265,-134,-130,-102,296,-265,-265,-67,-133,-167,-131,-132,]),'CONTINUE':([135,194,195,265,271,363,373,],[-265,237,-50,-49,237,-265,-265,]),'PLUS_ASSIGN':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,119,157,158,159,161,162,163,186,203,204,206,213,217,240,243,244,258,260,274,279,281,290,310,313,314,333,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,-98,-144,-125,-126,-123,-127,-128,-145,-66,-68,-93,-129,-140,-102,302,-265,-134,-130,-102,302,-265,-265,-67,-133,-167,-131,-132,]),'NOT':([53,85,97,98,99,104,107,117,120,123,135,148,160,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,194,195,218,229,234,238,250,257,259,265,271,291,292,293,294,295,296,297,298,299,300,301,302,303,304,320,322,323,334,349,350,363,373,],[120,120,-165,120,120,-164,-163,-166,120,120,-265,120,120,120,-156,-147,-161,-162,-149,-155,-154,120,-151,-158,-159,-150,-153,-148,-152,-146,-157,-160,120,-50,120,120,120,120,120,120,120,-49,120,120,-190,-200,-193,-192,-198,-197,-195,-199,-196,120,-191,-194,-201,120,120,-201,120,120,120,-265,-265,]),'$end':([3,4,5,8,9,10,11,24,35,],[-1,0,-265,-250,-265,-249,-253,-251,-252,]),'TYPE':([5,8,9,10,11,24,33,34,35,40,45,52,67,76,77,79,81,89,118,121,131,135,137,141,166,192,194,195,197,199,200,214,221,253,265,271,363,364,369,373,379,],[-265,-250,-265,23,-253,-251,73,-265,-252,73,73,73,73,-65,-63,73,73,73,73,73,73,-265,73,-265,73,-64,23,-50,-37,73,73,73,73,73,-49,23,-265,73,374,-265,73,]),'OR':([96,100,101,102,103,105,106,108,109,110,111,112,113,115,116,119,150,156,157,158,159,161,162,163,186,206,212,213,217,240,244,258,260,262,274,281,290,308,310,312,313,314,330,333,338,339,348,360,],[-124,-143,-91,-122,-100,-92,-94,-95,-99,-102,-101,-97,-139,-96,183,-98,183,183,-144,-125,-126,-123,-127,-128,-145,-93,183,-129,183,-102,183,-134,-130,183,-102,183,183,183,183,183,-133,-167,183,-131,183,183,183,-132,]),'RUNE_T':([33,34,40,45,52,67,76,77,79,81,89,118,121,131,137,141,166,192,197,199,200,214,221,253,364,369,379,],[75,-265,75,75,75,75,-65,-63,75,75,75,75,75,75,75,-265,75,-64,-37,75,75,75,75,75,75,75,75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'FunctionBody':([80,],[133,]),'Conversion':([53,85,98,99,120,123,148,160,164,174,194,218,229,234,238,250,257,259,271,291,301,320,322,328,334,349,350,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'ContinueStmt':([194,271,],[222,222,]),'ParameterListOpt':([81,131,],[136,136,]),'ExpressionRep':([150,244,281,290,],[203,203,203,203,]),'ExpressionStmt':([194,234,238,271,349,],[223,223,223,223,223,]),'Statement':([194,271,],[224,319,]),'ParameterDeclCommaRep':([81,131,],[138,138,]),'AddMulOp':([116,150,156,212,217,244,262,281,290,308,310,312,330,338,339,348,],[171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,]),'IfStmt':([194,271,346,],[242,242,358,]),'StatementRep':([135,363,373,],[194,194,194,]),'TypeToken':([33,40,45,52,67,79,81,89,118,121,131,137,166,199,200,214,221,253,364,369,379,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'AliasDecl':([23,86,],[42,42,]),'TypeSwitchGuard':([289,],[327,]),'PackageNameDotOpt':([13,47,],[29,29,]),'TypeName':([33,40,45,52,67,79,81,89,118,121,131,137,166,199,200,214,221,253,364,369,379,],[60,60,60,60,60,60,60,60,60,187,60,60,60,60,60,60,60,60,60,60,60,]),'BinaryOp':([116,150,156,212,217,244,262,281,290,308,310,312,330,338,339,348,],[174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,]),'ExprCaseClause':([340,],[354,]),'ParametersList':([81,131,],[140,140,]),'ParameterDecl':([81,131,199,200,],[142,142,255,256,]),'FunctionName':([20,],[37,]),'LabeledStmt':([194,271,],[227,227,]),'IdentifierOpt':([289,],[328,]),'StatementList':([135,363,373,],[196,370,377,]),'TypeAssertion':([100,343,],[162,162,]),'ConditionOpt':([320,],[337,]),'ElementType':([166,],[216,]),'PointerType':([33,40,45,52,67,79,81,89,118,131,137,166,199,200,214,221,253,364,369,379,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'VarSpecRep':([39,],[82,]),'TypeSwitchStmt':([194,271,],[228,228,]),'RelOp':([116,150,156,212,217,244,262,281,290,308,310,312,330,338,339,348,],[180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,]),'VarDecl':([10,194,271,],[22,22,22,]),'Tag':([264,],[317,]),'ConstSpecRep':([32,],[50,]),'Operand':([53,85,98,99,120,123,148,160,164,174,194,218,229,234,238,250,257,259,271,291,301,320,322,328,334,349,350,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'TypeSpec':([23,86,],[44,152,]),'Index':([100,343,],[158,158,]),'Parameters':([37,79,],[79,127,]),'UnaryOp':([53,85,98,99,116,120,123,148,150,156,160,164,174,194,212,217,218,229,234,238,244,250,257,259,262,271,281,290,291,301,308,310,312,320,322,330,334,338,339,348,349,350,],[99,99,99,99,167,99,99,99,167,167,99,99,99,99,167,167,99,99,99,99,167,99,99,99,167,99,167,167,99,99,167,167,167,99,99,167,99,167,167,167,99,99,]),'PackageName':([2,13,47,],[6,28,28,]),'SourceFile':([0,],[3,]),'ExpressionListPureOpt':([229,],[268,]),'Label':([194,226,237,245,271,],[230,267,285,285,230,]),'FunctionDecl':([10,],[15,]),'TopLevelDecl':([10,],[16,]),'ExprCaseClauseRep':([325,],[340,]),'ExprSwitchStmt':([194,271,],[231,231,]),'IdentifierList':([14,21,50,81,82,131,190,199,200,],[33,40,33,137,40,137,221,253,253,]),'TypeLit':([33,40,45,52,67,79,81,89,118,131,137,166,199,200,214,221,253,364,369,379,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'ImportDeclRep':([5,],[9,]),'PackageClause':([0,],[1,]),'TypeList':([364,],[372,]),'ResultOpt':([79,],[129,]),'Selector':([100,343,],[161,161,]),'RangeClause':([234,],[273,]),'IncDecStmt':([194,234,238,271,349,],[232,232,232,232,232,]),'GotoStmt':([194,271,],[233,233,]),'TopLevelDeclRep':([9,],[10,]),'PrimaryExpr':([53,85,98,99,120,123,148,160,164,174,194,218,229,234,238,250,257,259,271,291,301,320,322,328,334,349,350,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,343,100,100,100,]),'assign_op':([243,279,],[301,301,]),'Signature':([37,],[80,]),'Block':([80,194,271,277,308,346,],[134,235,235,321,332,359,]),'ExpressionIdentListOpt':([234,],[278,]),'SwitchStmt':([194,271,],[236,236,]),'VarSpec':([21,82,],[38,145,]),'Result':([79,],[132,]),'Assignment':([194,234,238,271,349,],[225,225,225,225,225,]),'ExpressionListTypeOpt':([160,],[209,]),'QualifiedIdent':([33,40,45,52,67,79,81,89,118,121,131,137,166,199,200,214,221,253,364,369,379,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'TypeCaseClause':([355,],[367,]),'Literal':([53,85,98,99,120,123,148,160,164,174,194,218,229,234,238,250,257,259,271,291,301,320,322,328,334,349,350,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'ImportDecl':([9,],[12,]),'OperandName':([53,85,98,99,120,123,148,160,164,174,194,218,229,234,238,250,257,259,271,291,301,320,322,328,334,349,350,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'AssignOp':([243,279,],[292,292,]),'FieldDeclRep':([124,],[190,]),'TypeRep':([371,],[375,]),'start':([0,],[4,]),'Declaration':([10,194,271,],[17,239,239,]),'Condition':([234,320,],[275,335,]),'StructType':([33,40,45,52,67,79,81,89,118,131,137,166,199,200,214,221,253,364,369,379,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'ConstSpec':([14,50,],[31,92,]),'epsilon':([5,9,13,25,32,33,34,39,43,47,79,81,84,124,131,135,141,150,160,164,194,229,234,237,238,244,245,259,264,271,281,289,290,320,325,332,342,349,363,371,373,],[8,11,27,46,51,65,76,83,87,27,130,143,146,191,143,195,76,204,207,211,241,269,276,283,288,204,283,211,316,241,204,326,204,336,341,345,356,241,195,376,195,]),'ConditionBlockOpt':([234,],[277,]),'ExpressionList':([85,123,148,160,194,229,234,238,271,301,349,350,],[149,189,202,208,243,270,279,243,243,331,243,362,]),'SimpleStmt':([194,234,238,271,349,],[247,272,286,247,361,]),'ImportSpecRep':([25,],[47,]),'Expression':([53,85,98,123,148,160,164,174,194,218,229,234,238,250,257,259,271,291,301,320,322,334,349,350,],[116,150,156,150,150,150,212,217,244,262,150,281,290,308,310,312,244,330,150,338,339,348,244,150,]),'ImportPath':([29,],[48,]),'ExprSwitchCase':([340,],[351,]),'ExpressionOpt':([164,238,259,],[210,287,311,]),'IdentifierRep':([34,141,],[77,77,]),'TypeExprListOpt':([33,],[71,]),'ReturnStmt':([194,271,],[246,246,]),'ConstDecl':([10,194,271,],[18,18,18,]),'ExpressionIdentifier':([234,],[282,]),'Slice':([100,343,],[159,159,]),'ArrayType':([33,40,45,52,67,79,81,89,118,131,137,166,199,200,214,221,253,364,369,379,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'ForStmt':([194,271,],[248,248,]),'Arguments':([100,343,],[163,163,]),'Function':([37,],[78,]),'ImportSpec':([13,47,],[26,91,]),'Type':([33,40,45,52,67,79,81,89,118,131,137,166,199,200,214,221,253,364,369,379,],[55,84,88,94,122,128,139,153,185,193,198,215,254,254,261,264,309,371,261,380,]),'TypeSpecRep':([43,],[86,]),'LabelOpt':([237,245,],[284,307,]),'TypeCaseClauseOpt':([342,],[355,]),'TypeDecl':([10,194,271,],[19,19,19,]),'TypeSwitchCase':([355,],[365,]),'BaseType':([52,],[95,]),'UnaryExpr':([53,85,98,99,120,123,148,160,164,174,194,218,229,234,238,250,257,259,271,291,301,320,322,334,349,350,],[113,113,113,157,186,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'SimpleStmtOpt':([238,],[289,]),'ArrayLength':([53,],[114,]),'ForClause':([234,],[280,]),'TypeOpt':([33,],[68,]),'ShortVarDecl':([194,234,238,271,349,],[249,249,249,249,249,]),'TypeDef':([23,86,],[41,41,]),'FieldDecl':([190,],[219,]),'BreakStmt':([194,271,],[251,251,]),'TagOpt':([264,],[318,]),'BasicLit':([53,85,98,99,120,123,148,160,164,174,194,218,229,234,238,250,257,259,271,291,301,320,322,328,334,349,350,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'ExpressionListOpt':([84,],[147,]),'ElseOpt':([332,],[347,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',26),
  ('Type -> TypeName','Type',1,'p_type','parser.py',33),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',34),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_type','parser.py',35),
  ('TypeName -> TypeToken','TypeName',1,'p_type_name','parser.py',42),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',43),
  ('TypeToken -> INT_T','TypeToken',1,'p_type_token','parser.py',47),
  ('TypeToken -> FLOAT_T','TypeToken',1,'p_type_token','parser.py',48),
  ('TypeToken -> UINT_T','TypeToken',1,'p_type_token','parser.py',49),
  ('TypeToken -> COMPLEX_T','TypeToken',1,'p_type_token','parser.py',50),
  ('TypeToken -> RUNE_T','TypeToken',1,'p_type_token','parser.py',51),
  ('TypeToken -> BOOL_T','TypeToken',1,'p_type_token','parser.py',52),
  ('TypeToken -> STRING_T','TypeToken',1,'p_type_token','parser.py',53),
  ('TypeToken -> TYPE IDENTIFIER','TypeToken',2,'p_type_token','parser.py',54),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',61),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',62),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',63),
  ('TypeOpt -> Type','TypeOpt',1,'p_type_opt','parser.py',67),
  ('TypeOpt -> epsilon','TypeOpt',1,'p_type_opt','parser.py',68),
  ('ArrayType -> LSQUARE ArrayLength RSQUARE ElementType','ArrayType',4,'p_array_type','parser.py',78),
  ('ArrayLength -> Expression','ArrayLength',1,'p_array_length','parser.py',82),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',86),
  ('StructType -> STRUCT LCURL FieldDeclRep RCURL','StructType',4,'p_struct_type','parser.py',94),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',98),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',99),
  ('FieldDecl -> IdentifierList Type TagOpt','FieldDecl',3,'p_field_decl','parser.py',106),
  ('TagOpt -> Tag','TagOpt',1,'p_TagOpt','parser.py',110),
  ('TagOpt -> epsilon','TagOpt',1,'p_TagOpt','parser.py',111),
  ('Tag -> STRING','Tag',1,'p_Tag','parser.py',115),
  ('PointerType -> STAR BaseType','PointerType',2,'p_point_type','parser.py',122),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',126),
  ('Signature -> Parameters ResultOpt','Signature',2,'p_sign','parser.py',133),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',137),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',138),
  ('Result -> Parameters','Result',1,'p_result','parser.py',142),
  ('Result -> Type','Result',1,'p_result','parser.py',143),
  ('Parameters -> LPAREN ParameterListOpt RPAREN','Parameters',3,'p_params','parser.py',147),
  ('ParameterListOpt -> ParametersList','ParameterListOpt',1,'p_param_list_opt','parser.py',151),
  ('ParameterListOpt -> epsilon','ParameterListOpt',1,'p_param_list_opt','parser.py',152),
  ('ParametersList -> Type','ParametersList',1,'p_param_list','parser.py',156),
  ('ParametersList -> IdentifierList Type','ParametersList',2,'p_param_list','parser.py',157),
  ('ParametersList -> ParameterDeclCommaRep','ParametersList',1,'p_param_list','parser.py',158),
  ('ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',165),
  ('ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',166),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',170),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',171),
  ('Block -> LCURL StatementList RCURL','Block',3,'p_block','parser.py',181),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',185),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',189),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',190),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',200),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',201),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',202),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',206),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',207),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',214),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',215),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',222),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',223),
  ('ConstSpec -> IdentifierList TypeExprListOpt','ConstSpec',2,'p_const_spec','parser.py',230),
  ('TypeExprListOpt -> TypeOpt ASSIGN ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',234),
  ('TypeExprListOpt -> epsilon','TypeExprListOpt',1,'p_type_expr_list','parser.py',235),
  ('IdentifierList -> IDENTIFIER IdentifierRep','IdentifierList',2,'p_identifier_list','parser.py',242),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',246),
  ('IdentifierRep -> epsilon','IdentifierRep',1,'p_identifier_rep','parser.py',247),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',254),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',258),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',259),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',269),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',270),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',277),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',278),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',285),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',286),
  ('AliasDecl -> IDENTIFIER ASSIGN Type','AliasDecl',3,'p_alias_decl','parser.py',290),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',297),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',304),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',305),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',312),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',313),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',320),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_var_spec','parser.py',321),
  ('ExpressionListOpt -> ASSIGN ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',328),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',329),
  ('ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',339),
  ('FunctionDecl -> FUNC FunctionName Function','FunctionDecl',3,'p_func_decl','parser.py',347),
  ('FunctionDecl -> FUNC FunctionName Signature','FunctionDecl',3,'p_func_decl','parser.py',348),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',352),
  ('Function -> Signature FunctionBody','Function',2,'p_func','parser.py',356),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',360),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',367),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',368),
  ('Operand -> LPAREN Expression RPAREN','Operand',3,'p_operand','parser.py',369),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',376),
  ('BasicLit -> INTEGER','BasicLit',1,'p_basic_lit','parser.py',381),
  ('BasicLit -> OCTAL','BasicLit',1,'p_basic_lit','parser.py',382),
  ('BasicLit -> HEX','BasicLit',1,'p_basic_lit','parser.py',383),
  ('BasicLit -> FLOAT','BasicLit',1,'p_basic_lit','parser.py',384),
  ('BasicLit -> IMAGINARY','BasicLit',1,'p_basic_lit','parser.py',385),
  ('BasicLit -> RUNE','BasicLit',1,'p_basic_lit','parser.py',386),
  ('BasicLit -> STRING','BasicLit',1,'p_basic_lit','parser.py',387),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',391),
  ('QualifiedIdent -> IDENTIFIER DOT TypeName','QualifiedIdent',3,'p_quali_ident','parser.py',398),
  ('CompositeLit -> LiteralType LiteralValue','CompositeLit',2,'p_comp_lit','parser.py',405),
  ('LiteralType -> ArrayType','LiteralType',1,'p_lit_type','parser.py',409),
  ('LiteralType -> ElementType','LiteralType',1,'p_lit_type','parser.py',410),
  ('LiteralType -> TypeName','LiteralType',1,'p_lit_type','parser.py',411),
  ('LiteralValue -> LCURL ElementListOpt RCURL','LiteralValue',3,'p_lit_val','parser.py',415),
  ('ElementListOpt -> ElementList','ElementListOpt',1,'p_elem_list_comma_opt','parser.py',419),
  ('ElementListOpt -> epsilon','ElementListOpt',1,'p_elem_list_comma_opt','parser.py',420),
  ('ElementList -> KeyedElement KeyedElementCommaRep','ElementList',2,'p_elem_list','parser.py',424),
  ('KeyedElementCommaRep -> KeyedElementCommaRep COMMA KeyedElement','KeyedElementCommaRep',3,'p_key_elem_comma_rep','parser.py',428),
  ('KeyedElementCommaRep -> epsilon','KeyedElementCommaRep',1,'p_key_elem_comma_rep','parser.py',429),
  ('KeyedElement -> Key COLON Element','KeyedElement',3,'p_key_elem','parser.py',436),
  ('KeyedElement -> Element','KeyedElement',1,'p_key_elem','parser.py',437),
  ('Key -> FieldName','Key',1,'p_key','parser.py',444),
  ('Key -> Expression','Key',1,'p_key','parser.py',445),
  ('Key -> LiteralValue','Key',1,'p_key','parser.py',446),
  ('FieldName -> IDENTIFIER','FieldName',1,'p_field_name','parser.py',450),
  ('Element -> Expression','Element',1,'p_elem','parser.py',454),
  ('Element -> LiteralValue','Element',1,'p_elem','parser.py',455),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',462),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','parser.py',463),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',464),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_prim_expr','parser.py',465),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',466),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',467),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_prim_expr','parser.py',468),
  ('Selector -> DOT IDENTIFIER','Selector',2,'p_selector','parser.py',475),
  ('Index -> LSQUARE Expression RSQUARE','Index',3,'p_index','parser.py',479),
  ('Slice -> LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE','Slice',5,'p_slice','parser.py',483),
  ('Slice -> LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARE','Slice',7,'p_slice','parser.py',484),
  ('TypeAssertion -> DOT LPAREN Type RPAREN','TypeAssertion',4,'p_type_assert','parser.py',491),
  ('Arguments -> LPAREN ExpressionListTypeOpt RPAREN','Arguments',3,'p_argument','parser.py',495),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',499),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',500),
  ('ExpressionListCommaOpt -> COMMA ExpressionList','ExpressionListCommaOpt',2,'p_expr_list_comma_opt','parser.py',515),
  ('ExpressionListCommaOpt -> epsilon','ExpressionListCommaOpt',1,'p_expr_list_comma_opt','parser.py',516),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',526),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_expr','parser.py',527),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',534),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',535),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',539),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',540),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',541),
  ('BinaryOp -> LOGICAL_OR','BinaryOp',1,'p_binary_op','parser.py',550),
  ('BinaryOp -> LOGICAL_AND','BinaryOp',1,'p_binary_op','parser.py',551),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_binary_op','parser.py',552),
  ('BinaryOp -> AddMulOp','BinaryOp',1,'p_binary_op','parser.py',553),
  ('RelOp -> EQUALS','RelOp',1,'p_rel_op','parser.py',562),
  ('RelOp -> NOT_ASSIGN','RelOp',1,'p_rel_op','parser.py',563),
  ('RelOp -> LESSER','RelOp',1,'p_rel_op','parser.py',564),
  ('RelOp -> GREATER','RelOp',1,'p_rel_op','parser.py',565),
  ('RelOp -> LESS_EQUALS','RelOp',1,'p_rel_op','parser.py',566),
  ('RelOp -> MORE_EQUALS','RelOp',1,'p_rel_op','parser.py',567),
  ('AddMulOp -> UnaryOp','AddMulOp',1,'p_add_mul_op','parser.py',582),
  ('AddMulOp -> OR','AddMulOp',1,'p_add_mul_op','parser.py',583),
  ('AddMulOp -> XOR','AddMulOp',1,'p_add_mul_op','parser.py',584),
  ('AddMulOp -> DIVIDE','AddMulOp',1,'p_add_mul_op','parser.py',585),
  ('AddMulOp -> MOD','AddMulOp',1,'p_add_mul_op','parser.py',586),
  ('AddMulOp -> LSHIFT','AddMulOp',1,'p_add_mul_op','parser.py',587),
  ('AddMulOp -> RSHIFT','AddMulOp',1,'p_add_mul_op','parser.py',588),
  ('UnaryOp -> PLUS','UnaryOp',1,'p_unary_op','parser.py',605),
  ('UnaryOp -> MINUS','UnaryOp',1,'p_unary_op','parser.py',606),
  ('UnaryOp -> STAR','UnaryOp',1,'p_unary_op','parser.py',607),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',608),
  ('Conversion -> TYPECAST Type LPAREN Expression RPAREN','Conversion',5,'p_conversion','parser.py',624),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',635),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','parser.py',636),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',637),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',638),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',639),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',640),
  ('Statement -> GotoStmt','Statement',1,'p_statement','parser.py',641),
  ('Statement -> Block','Statement',1,'p_statement','parser.py',642),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',643),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',644),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',645),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',651),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',652),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',653),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',654),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',655),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_labeled_statements','parser.py',660),
  ('Label -> IDENTIFIER','Label',1,'p_label','parser.py',664),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',669),
  ('IncDecStmt -> Expression INCR','IncDecStmt',2,'p_inc_dec','parser.py',673),
  ('IncDecStmt -> Expression DECR','IncDecStmt',2,'p_inc_dec','parser.py',674),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',682),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','parser.py',686),
  ('AssignOp -> PLUS_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',690),
  ('AssignOp -> MINUS_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',691),
  ('AssignOp -> STAR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',692),
  ('AssignOp -> DIVIDE_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',693),
  ('AssignOp -> MOD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',694),
  ('AssignOp -> AND_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',695),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',696),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',697),
  ('AssignOp -> LSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',698),
  ('AssignOp -> RSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',699),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',700),
  ('IfStmt -> IF Expression Block ElseOpt','IfStmt',4,'p_if_statement','parser.py',705),
  ('SimpleStmtOpt -> SimpleStmt SEMICOLON','SimpleStmtOpt',2,'p_SimpleStmtOpt','parser.py',709),
  ('SimpleStmtOpt -> epsilon','SimpleStmtOpt',1,'p_SimpleStmtOpt','parser.py',710),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',717),
  ('ElseOpt -> ELSE Block','ElseOpt',2,'p_else_opt','parser.py',718),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',719),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',734),
  ('SwitchStmt -> TypeSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',735),
  ('ExprSwitchStmt -> SWITCH ExpressionOpt LCURL ExprCaseClauseRep RCURL','ExprSwitchStmt',5,'p_expr_switch_stmt','parser.py',740),
  ('ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause','ExprCaseClauseRep',2,'p_expr_case_clause_rep','parser.py',744),
  ('ExprCaseClauseRep -> epsilon','ExprCaseClauseRep',1,'p_expr_case_clause_rep','parser.py',745),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_expr_case_clause','parser.py',752),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_expr_switch_case','parser.py',756),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_expr_switch_case','parser.py',757),
  ('TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LCURL TypeCaseClauseOpt RCURL','TypeSwitchStmt',6,'p_type_switch_stmt','parser.py',764),
  ('TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LPAREN TYPE RPAREN','TypeSwitchGuard',6,'p_type_switch_guard','parser.py',769),
  ('IdentifierOpt -> IDENTIFIER QUICK_ASSIGN','IdentifierOpt',2,'p_identifier_opt','parser.py',774),
  ('IdentifierOpt -> epsilon','IdentifierOpt',1,'p_identifier_opt','parser.py',775),
  ('TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause','TypeCaseClauseOpt',2,'p_type_case_clause_opt','parser.py',783),
  ('TypeCaseClauseOpt -> epsilon','TypeCaseClauseOpt',1,'p_type_case_clause_opt','parser.py',784),
  ('TypeCaseClause -> TypeSwitchCase COLON StatementList','TypeCaseClause',3,'p_type_case_clause','parser.py',791),
  ('TypeSwitchCase -> CASE TypeList','TypeSwitchCase',2,'p_type_switch_case','parser.py',796),
  ('TypeSwitchCase -> DEFAULT','TypeSwitchCase',1,'p_type_switch_case','parser.py',797),
  ('TypeList -> Type TypeRep','TypeList',2,'p_type_list','parser.py',804),
  ('TypeRep -> TypeRep COMMA Type','TypeRep',3,'p_type_rep','parser.py',808),
  ('TypeRep -> epsilon','TypeRep',1,'p_type_rep','parser.py',809),
  ('ForStmt -> FOR ConditionBlockOpt Block','ForStmt',3,'p_for','parser.py',824),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',828),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',829),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',830),
  ('ConditionBlockOpt -> RangeClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',831),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',835),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','parser.py',839),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',853),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',854),
  ('RangeClause -> ExpressionIdentListOpt RANGE Expression','RangeClause',3,'p_rageclause','parser.py',867),
  ('ExpressionIdentListOpt -> epsilon','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',871),
  ('ExpressionIdentListOpt -> ExpressionIdentifier','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',872),
  ('ExpressionIdentifier -> ExpressionList ASSIGN','ExpressionIdentifier',2,'p_expressionidentifier','parser.py',876),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',883),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',887),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',888),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','parser.py',892),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','parser.py',896),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','parser.py',900),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','parser.py',901),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','parser.py',905),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',912),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',916),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',917),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',924),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',925),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',935),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',940),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',947),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',948),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',955),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',956),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',963),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',967),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',968),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',969),
  ('ImportPath -> STRING','ImportPath',1,'p_import_path','parser.py',976),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',982),
]
