Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> assign_list
Rule 1     assign_list -> assign SEMIC assign_list
Rule 2     assign_list -> empty
Rule 3     assign -> VAR NAME EQUALS expr
Rule 4     expr -> expr PLUS term
Rule 5     expr -> expr MINUS term
Rule 6     expr -> term
Rule 7     term -> term TIMES factor
Rule 8     term -> term DIVIDE factor
Rule 9     term -> factor
Rule 10    factor -> NUMBER
Rule 11    empty -> <empty>

Terminals, with rules where they appear

DIVIDE               : 8
EQUALS               : 3
MINUS                : 5
NAME                 : 3
NUMBER               : 10
PLUS                 : 4
SEMIC                : 1
TIMES                : 7
VAR                  : 3
error                : 

Nonterminals, with rules where they appear

assign               : 1
assign_list          : 1 0
empty                : 2
expr                 : 3 4 5
factor               : 7 8 9
term                 : 4 5 6 7 8

Parsing method: LALR

state 0

    (0) S' -> . assign_list
    (1) assign_list -> . assign SEMIC assign_list
    (2) assign_list -> . empty
    (3) assign -> . VAR NAME EQUALS expr
    (11) empty -> .

    VAR             shift and go to state 1
    $end            reduce using rule 11 (empty -> .)

    assign_list                    shift and go to state 2
    assign                         shift and go to state 3
    empty                          shift and go to state 4

state 1

    (3) assign -> VAR . NAME EQUALS expr

    NAME            shift and go to state 5


state 2

    (0) S' -> assign_list .



state 3

    (1) assign_list -> assign . SEMIC assign_list

    SEMIC           shift and go to state 6


state 4

    (2) assign_list -> empty .

    $end            reduce using rule 2 (assign_list -> empty .)


state 5

    (3) assign -> VAR NAME . EQUALS expr

    EQUALS          shift and go to state 7


state 6

    (1) assign_list -> assign SEMIC . assign_list
    (1) assign_list -> . assign SEMIC assign_list
    (2) assign_list -> . empty
    (3) assign -> . VAR NAME EQUALS expr
    (11) empty -> .

    VAR             shift and go to state 1
    $end            reduce using rule 11 (empty -> .)

    assign_list                    shift and go to state 8
    assign                         shift and go to state 3
    empty                          shift and go to state 4

state 7

    (3) assign -> VAR NAME EQUALS . expr
    (4) expr -> . expr PLUS term
    (5) expr -> . expr MINUS term
    (6) expr -> . term
    (7) term -> . term TIMES factor
    (8) term -> . term DIVIDE factor
    (9) term -> . factor
    (10) factor -> . NUMBER

    NUMBER          shift and go to state 10

    expr                           shift and go to state 11
    term                           shift and go to state 9
    factor                         shift and go to state 12

state 8

    (1) assign_list -> assign SEMIC assign_list .

    $end            reduce using rule 1 (assign_list -> assign SEMIC assign_list .)


state 9

    (6) expr -> term .
    (7) term -> term . TIMES factor
    (8) term -> term . DIVIDE factor

    PLUS            reduce using rule 6 (expr -> term .)
    MINUS           reduce using rule 6 (expr -> term .)
    SEMIC           reduce using rule 6 (expr -> term .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 13


state 10

    (10) factor -> NUMBER .

    TIMES           reduce using rule 10 (factor -> NUMBER .)
    DIVIDE          reduce using rule 10 (factor -> NUMBER .)
    PLUS            reduce using rule 10 (factor -> NUMBER .)
    MINUS           reduce using rule 10 (factor -> NUMBER .)
    SEMIC           reduce using rule 10 (factor -> NUMBER .)


state 11

    (3) assign -> VAR NAME EQUALS expr .
    (4) expr -> expr . PLUS term
    (5) expr -> expr . MINUS term

    SEMIC           reduce using rule 3 (assign -> VAR NAME EQUALS expr .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 12

    (9) term -> factor .

    TIMES           reduce using rule 9 (term -> factor .)
    DIVIDE          reduce using rule 9 (term -> factor .)
    PLUS            reduce using rule 9 (term -> factor .)
    MINUS           reduce using rule 9 (term -> factor .)
    SEMIC           reduce using rule 9 (term -> factor .)


state 13

    (8) term -> term DIVIDE . factor
    (10) factor -> . NUMBER

    NUMBER          shift and go to state 10

    factor                         shift and go to state 17

state 14

    (7) term -> term TIMES . factor
    (10) factor -> . NUMBER

    NUMBER          shift and go to state 10

    factor                         shift and go to state 18

state 15

    (4) expr -> expr PLUS . term
    (7) term -> . term TIMES factor
    (8) term -> . term DIVIDE factor
    (9) term -> . factor
    (10) factor -> . NUMBER

    NUMBER          shift and go to state 10

    term                           shift and go to state 19
    factor                         shift and go to state 12

state 16

    (5) expr -> expr MINUS . term
    (7) term -> . term TIMES factor
    (8) term -> . term DIVIDE factor
    (9) term -> . factor
    (10) factor -> . NUMBER

    NUMBER          shift and go to state 10

    term                           shift and go to state 20
    factor                         shift and go to state 12

state 17

    (8) term -> term DIVIDE factor .

    TIMES           reduce using rule 8 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 8 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 8 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 8 (term -> term DIVIDE factor .)
    SEMIC           reduce using rule 8 (term -> term DIVIDE factor .)


state 18

    (7) term -> term TIMES factor .

    TIMES           reduce using rule 7 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 7 (term -> term TIMES factor .)
    PLUS            reduce using rule 7 (term -> term TIMES factor .)
    MINUS           reduce using rule 7 (term -> term TIMES factor .)
    SEMIC           reduce using rule 7 (term -> term TIMES factor .)


state 19

    (4) expr -> expr PLUS term .
    (7) term -> term . TIMES factor
    (8) term -> term . DIVIDE factor

    PLUS            reduce using rule 4 (expr -> expr PLUS term .)
    MINUS           reduce using rule 4 (expr -> expr PLUS term .)
    SEMIC           reduce using rule 4 (expr -> expr PLUS term .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 13


state 20

    (5) expr -> expr MINUS term .
    (7) term -> term . TIMES factor
    (8) term -> term . DIVIDE factor

    PLUS            reduce using rule 5 (expr -> expr MINUS term .)
    MINUS           reduce using rule 5 (expr -> expr MINUS term .)
    SEMIC           reduce using rule 5 (expr -> expr MINUS term .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 13

